<?php

require_once drupal_get_path('module', 'oj_judge').'/oj_rejudge.inc';
require_once 'PHPLock.class.php';
global $php_path,$judge_php;

function oj_judge_init()
{
	global $php_path,$judge_php;
	$php_path = realpath(dirname($_SERVER['MIBDIRS']).'../../').'/php';
	$judge_php = dirname($_SERVER['SCRIPT_FILENAME']).'/Judge.php';
}

function oj_judge_menu()
{
	$items['rejudge'] = array
	(
		'title' => 'Rejudge',
		'page callback' => 'oj_rejudge',
		//'page arguments' => array(1,2),
		'access callback' => 'oj_rejudge_access',
		'type' => MENU_CALLBACK
	);
	$items['rejudge/sid/%'] = array
	(
		'title' => 'Rejudge Solution',
		'page callback' => 'oj_rejudge_one',
		'page arguments' => array(2),
		'access callback' => 'oj_rejudge_access',
		'type' => MENU_CALLBACK
	);
	$items['rejudge/pid/%'] = array
	(
		'title' => 'Rejudge Problem',
		'page callback' => 'oj_rejudge_problem',
		'page arguments' => array(2),
		'access callback' => 'oj_rejudge_access',
		'type' => MENU_CALLBACK
	);
	$items['rejudge/cid/%'] = array
	(
		'title' => 'Rejudge Contest',
		'page callback' => 'oj_rejudge_contest',
		'page arguments' => array(2),
		'access callback' => 'oj_rejudge_access',
		'type' => MENU_CALLBACK
	);
	return $items;
}

function oj_judge($sid)
{
	if(oj_get_value('DeleteTempFile'))
		delete_last($sid-1);
	/* 
	 * I need a program to compile and run and judge and update database.Maybe a PHP script
	 * how to give the data to the program?
	 *
	 * First start the child process com.exe with pipes,
	 * then start child process run.exe with pipes get the result and return value,
	 * then call the drupal menu to update the database.
	 * The security is very important.
	 */
	global $php_path,$judge_php;
	$pid = start_proc($php_path.' '.$judge_php.' judge '.$sid);
	//if($pid)
	//	proc_kill($pid);
}

function oj_compile($sid)
{
	$item = db_fetch_object(db_query("SELECT *,uncompress(source) AS source FROM {solution} WHERE sid=%d",$sid));
	$path = oj_get_value('WorkingPath').$sid."\\";
	//debug($path,'path');
	$name = 'Main';
	$ext = oj_judge_value('LanguageExts',$item->language);
	//debug($item->language,'lanaugae');
	//debug($ext,'ext');
	$source_file = $path.'Main.'.$ext;
	if(!is_dir($path)&&!mkdir($path))
	{
		drupal_set_message("Cann't create directory $path!");
		return 1;
	}
	//debug($path,'path');
	$file_size = file_put_contents($source_file,$item->source);
	
	$spec = array
	(
		array("pipe","r"),
		array("pipe","w"),
		array("pipe","w")
	);
	$process = proc_open(oj_get_value('ComShell'), $spec, $pipes, $path);
	//debug($process,'$process');
	$cmdstr = oj_judge_value('LanguageDescs',$item->language).'CompileCmd';
	$cmd = oj_get_value($cmdstr);
	$cmd = str_replace(array('%PATH%','%NAME%','%EXT%'),array($path,$name,$ext),$cmd)."\r\n";
	if($item->language==2)
	{
		$cmd = str_replace(array('/'),'\\',$cmd);
	}
	//debug($cmd,'cmd');
	fwrite($pipes[0],$cmd);
	$out = stream_get_contents($pipes[1]);
	//debug($out,'$out');
	$error = stream_get_contents($pipes[2]);
	//debug($error,'$error');
	$error = phpcharset($error,'UTF-8');
	$file = $path."Main.".oj_judge_value('LanguageExes',$item->language);
	//debug($file,'$file');
	if(!is_file($file))
	{
		db_query("UPDATE {solution} SET result=7,error='%s' WHERE sid=%d",$error,$sid);
		if(!have_solved($sid))
			db_query("UPDATE {content_type_problem} SET field_error_value=field_error_value+1 WHERE field_pid_value=%d",$item->pid);
		fclose($pipes[0]);
		fclose($pipes[1]);
		fclose($pipes[2]);
		$return_value = proc_close($process);
		return 1;
	}
	fclose($pipes[0]);
	fclose($pipes[1]);
	fclose($pipes[2]);
	$return_value = proc_close($process);
	//debug($return_value,'$return_value');
	return $return_value;
}

function oj_run($sid)
{
	$item = db_fetch_object(db_query("SELECT s.sid,s.pid,s.uid,p.nid,p.field_time_value,p.field_memory_value,
		p.field_ctime_value,s.language,p.field_input_path_value,p.field_output_path_value FROM {solution} s 
		LEFT JOIN {content_type_problem} p ON s.pid=p.field_pid_value WHERE sid=%d",$sid));
	$node = node_load($item->nid);
	$input_path = $item->field_input_path_value;
	$output_path = $item->field_output_path_value;
	if(!is_dir($input_path))
	{
		db_query("UPDATE {solution} SET result=100 WHERE sid=%d",$sid);
		drupal_set_message("input_path is not correct.");
		return 100;
	}
	if(!is_dir($output_path))
	{
		db_query("UPDATE {solution} SET result=100 WHERE sid=%d",$sid);
		drupal_set_message("output_path is not correct.");
		return 100;
	}
	
	$data_files = file_scan_directory($input_path,'.in',array('.', '..', 'CVS'),0,FALSE,'filename',0,0);
	//debug($data_files,'$data_files');
	if(empty($data_files))
	{
		db_query("UPDATE {solution} SET result=100 WHERE sid=%d",$sid);
		return 100;
	}
	
	$data_in = array();
	$data_out = array();
	foreach ($data_files as $key=>$file)
	{
		$file_out = substr($file->filename,0,strlen($file->filename)-3).".out";
		if(!is_file($file_out))
			continue;
		$data_in[] = realpath($file->filename);
		$data_out[] = realpath($file_out);
	}
	$spec = array
	(
		array("pipe","r"),
		array("pipe","w"),
		array("pipe","w")
	);
	$str = '';
	$data_size = count($data_in);
	$path = oj_get_value('WorkingPath').$sid."\\";
	$process = proc_open(oj_get_value('RunShell'), $spec, $pipes, $path);
	
	$time = $item->field_time_value*oj_judge_value('LanguageTimeFactor',$item->language)
			+$data_size*oj_judge_value('LanguageExtTime',$item->language);
	$str.=$time."\r\n";//fwrite($pipes[0],$time."\n");
	//debug($time,'$time');
	$ctime = $item->field_ctime_value*oj_judge_value('LanguageTimeFactor',$item->language)
			+oj_judge_value('LanguageExtTime',$item->language);
	$str.=$ctime."\r\n";//fwrite($pipes[0],$ctime."\n");
	$memory = ($item->field_memory_value+oj_judge_value('LanguageExtMemory',$item->language))*1024;
	$str.=$memory."\r\n";//fwrite($pipes[0],$memory."\n");
	//debug($memory,'$memory');
	
	$runcmd = $path."Main.exe";
	//debug($runcmd,'$runcmd');
	$str.=$runcmd."\r\n";//fwrite($pipes[0],$runcmd."\n");
	//debug($runcmd,'$runcmd');
	$str.=$path."\r\n";//fwrite($pipes[0],$path."\n");
	//debug($path,'$path');
	$str.=$data_size."\r\n";//fwrite($pipes[0],$data_size."\n");
	//debug($data_size,'$data_size');
	foreach ($data_out as $id=>$file)
	{
		$str.=$data_in[$id]."\r\n";//fwrite($pipes[0],$data_in[$id]."\n");
		//debug($data_in[$id],'$data_in[$id]');
		$str.=$path.basename($file)."\r\n";//fwrite($pipes[0],$path.basename($file)."\n");
		//debug($path.basename($file),$path.basename($file));
		$str.=$file."\r\n";//fwrite($pipes[0],$file."\n");
		//debug($file,'$file');
	}
	$str .="\r\n";
	//debug($str,'str');
	fwrite($pipes[0],$str);
	
	$result = stream_get_contents($pipes[1]);
	$results = explode("\n",$result);
	$error = stream_get_contents($pipes[2]);
	$time = $results[0];
	$memory = $results[1]-oj_judge_value('LanguageExtMemory',$item->language);
	//debug($result,'$result');
	//debug($error,'error');
	fclose($pipes[0]);
	fclose($pipes[1]);
	fclose($pipes[2]);
	//debug(proc_get_status($process),'$process');
	$return_value = proc_close($process);
	//debug($return_value,'run $return_value');
	if (($return_value != 0)&&(strpos($result,"Exception")))
		$return_value = 5;
	$pass = have_solved($sid);
	db_query("UPDATE {solution} SET result=%d,time=%d,memory=%d WHERE sid=%d",$return_value,$time,$memory,$sid);
	if($return_value == 0)
	{
		++$node->field_accepted[0]['value'];
		if(!$pass)
		{
			++$node->field_solved[0]['value'];
			$account = user_load($item->uid);
			user_save($account,array('profile_solved'=>$account->profile_solved+1));
		}
	}
	else if(!$pass)
	{
		++$node->field_error[0]['value'];
	}
	node_save($node);
	return $return_value;
}

function have_solved($sid)
{
	$item = db_fetch_object(db_query("SELECT * FROM {solution} WHERE sid=%d",$sid));
	$item = db_fetch_object(db_query("SELECT sid FROM {solution} WHERE sid<%d AND pid=%d AND uid=%d
			AND result=0 LIMIT 1",$sid,$item->pid,$item->uid));
	return $item->sid!=null;
}

function delete_last($sid)
{
	$item = db_fetch_object(db_query("SELECT result FROM {solution} WHERE sid=%d",$sid));
	if($item->result==null||$item->result==10000)
		return;
	$path = oj_get_value('WorkingPath').$sid."\\";
	if(is_dir($path))
		deldir($path);
}

/********************************************************************/
function start_proc($comm)
{
	$path = oj_get_value('PsToolsPath');
	$work_path = dirname($_SERVER['SCRIPT_FILENAME']);
    $descriptorspec = array
	(
		0 => array('pipe','r'), // stdin
		1 => array('pipe','w'), // stdout
		2 => array('pipe','w') // stderr
    );
    $fpr = proc_open($path.'psexec.exe -d '.$comm,$descriptorspec,$pipes,$work_path);
	$out = stream_get_contents($pipes[1]);
	$error = stream_get_contents($pipes[2]);
	
	fclose($pipes[0]);
    fclose($pipes[1]);
    fclose($pipes[2]);
    proc_close($fpr);
    $pid = FALSE;
    if(preg_match("/process ID ([\d]{1,10})\./im",$error,$matches))
      $pid = $matches[1];
    else
		$pid=FALSE;
    return $pid;
}

function proc_isalive($pid)
{
	$path = oj_get_value('PsToolsPath');
    $alive = FALSE;
    $descriptorspec = array
	(
		0 => array('pipe', 'r'),   // stdin
		1 => array('pipe', 'w'),  // stdout
		2 => array('pipe', 'w')  // stderr
    ); 
    $fpr = proc_open($path.'pslist.exe '.$pid,$descriptorspec,$pipes,$path);
    fclose($pipes[0]);
    $stdout = '';
    while(!feof($pipes[1])){$stdout .= fgets($pipes[1],128);}    
    fclose($pipes[1]);
    $stderr = '';
    while(!feof($pipes[2])){$stderr .= fgets($pipes[2],128);}
    fclose($pipes[2]);
    proc_close($fpr);
    if(strpos($stdout,'not found')===FALSE)
		$alive = TRUE;
	
    return $alive;    
}

function proc_kill($pid)
{
	$path = oj_get_value('PsToolsPath');
    $succ = FALSE;
    $descriptorspec = array
	(
		0 => array('pipe', 'r'),   // stdin
		1 => array('pipe', 'w'),  // stdout
		2 => array('pipe', 'w')  // stderr
    ); 
    $fpr = proc_open($path.'pskill.exe '.$pid,$descriptorspec,$pipes,$path);
    fclose($pipes[0]);
    $stdout = '';
    while(!feof($pipes[1])){$stdout .= fgets($pipes[1],128);}    
    fclose($pipes[1]);
    $stderr = '';
    while(!feof($pipes[2])){$stderr .= fgets($pipes[2],128);}
    fclose($pipes[2]);
    proc_close($fpr);
    if(strpos($stdout,'killed')!==FALSE)
		$succ=TRUE;
    
    return $succ;
}

class Judge_thread
{
	private $sid;
	private $is_rejudge;
	private $lock;
	function __construct($sid,$is_rejudge = FALSE)
	{
		$this->sid = $sid;
		$this->is_rejudge = $is_rejudge;
		$this->lock = new File_Lock(dirname(dirname(__FILE__)) . "/FileLock.lock");
		
		$this->run();
	}
	function get_sid()
	{
		return $this->sid;
	}
	function is_rejudge()
	{
		return (bool)$this->is_rejudge;
	}
	function run()
	{
		while($this->lock->is_lock())
		{
			usleep(1000);
		}
		//debug($this->is_rejudge,'judge');
		if(!$this->is_rejudge())
		{
			$this->lock->writeLock();
			//oj_judge($this->sid);
			if(!oj_compile($this->sid))
			{
				oj_run($this->sid);
				//debug($this->sid,'sid');
			}
		}
		else
		{
			//debug($this->sid,'rejudge');
		}
		$this->lock->unlock();
	}
	function __destruct()
	{
		$this->lock->unlock();
	}
};

global $judge_list;
$judge_list = array();