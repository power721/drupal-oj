<?php

function oj_user_menu()
{
	$items['user/list'] = array
	(
		'title' => 'User Ranklist',
		'page callback' => 'oj_user_ranklist',
		'access callback' => TRUE,
		'file' => 'oj_user_list.inc',
	);
	
	$items['oj_user_list.ajax'] = array
	(
		'page callback' => 'oj_user_list_ajax',
		'type' => MENU_CALLBACK,
		'access callback' => TRUE,
		'file' => 'oj_user_list.inc',
	);
	
	$items['user/%user/status'] = array
	(
		'title' => 'Status',
		'page callback' => 'oj_user_info',
		'page arguments' => array(1),
		'access callback' => TRUE,
		'type' => MENU_LOCAL_TASK,
		'weight' => -1,
	);
	$items['user/cmp'] = array
	(
		'title' => 'User Compare',
		'page callback' => 'oj_user_cmp',
		'page arguments' => array(2,3),
        'access callback' => TRUE,
		'type' => MENU_CALLBACK,
		'file' => 'oj_user_cmp.inc',
	);
	$items['user/import'] = array
	(
		'title' => 'Import users form JudgeOnline',
		'page callback' => 'import_user',
		'page arguments' => array(2,3),
        'access arguments' => array('create problem content'),
		'type' => MENU_CALLBACK,
		'file' => 'oj_user_import.inc',
	);
	$items['user/reset'] = array
	(
		'title' => 'Reset Users',
		'page callback' => 'reset_user',
        'access callback' => 'reset_user_access',
		'type' => MENU_CALLBACK,
		'file' => 'oj_user_import.inc',
	);
	$items['user/rebuild_problem_info'] = array
	(
		'title' => 'Rebuild User Problem Info',
		'page callback' => 'rebuild_problem_info',
        'access arguments' => array('administer users'),
		'type' => MENU_CALLBACK,
	);
	return $items;
}
/**
 * Implementation of hook_user().
 * http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_user/6
 */
function oj_user_user($op, &$edit, &$account, $category = NULL)
{
	//debug($op,'$op');debug($edit,'$edit');debug($account,'$account');debug($category,'$category');
	switch($op)
	{
		case 'register':
		break;
		case 'insert':oj_user_insert($edit, $account, $category);variable_del('oj_user_register');//debug($edit,'$edit');debug($account,'$account');
		break;
		case 'login':$result = db_query('SELECT * FROM {profile_values} WHERE fid=3 AND uid=%d',$account->uid);
		if($item = db_fetch_object($result))
			db_query("UPDATE {profile_values} SET value='%s' WHERE fid=3 AND uid=%d",$_SERVER['REMOTE_ADDR'],$account->uid);
		else
			db_query("INSERT INTO {profile_values} (fid,uid,value) VALUES (3,%d,'%s')",$account->uid,$_SERVER['REMOTE_ADDR']);
		if($account->uid == 1||$account->roles['5'] != NULL)
			$_SESSION['IsAuthorized'] = TRUE;
		break;
		case 'logout':$_SESSION['IsAuthorized'] = FALSE;drupal_goto($_SERVER['HTTP_REFERER']);
		break;
		case 'view':global $user;
		oj_user_info($account);
		//date_default_timezone_set('Asia/Chongqing');
		$account->content['Basic']['profile_time'] = array
		(
			'#type' => 'user_profile_item',
			'#weight' => '21',
			'#title' => 'Last Loginned Time',
			'#value' => oj_date($account->login),
			'#attributes' => array('class' => 'profile-profile_time')
		);
		if($user->uid == $account->uid || user_access('access administration pages'))
		{
			$account->content['Basic']['profile_ip'] = array
			(
				'#type' => 'user_profile_item',
				'#weight' => '20',
				'#title' => 'Last Loginned IP',
				'#value' => $account->profile_ip,
				'#attributes' => array('class' => 'profile-profile_ip')
			);
		}
		break;
		case 'validate':
		if($edit['profile_qq'] != NULL && !check_qq($edit['profile_qq']))
		{
			form_set_error(profile_qq,"The QQ number is Invalid.");
		}
		break;
	}
}

/**
 * Implementation of hook_form_alter().
 * We replace the local login validation handler with our own.
 */
function oj_user_form_alter(&$form, $form_state, $form_id)
{
	//debug($form,'$form');debug($form_state,'$form_state');debug($form_id,'$form_id');
	if($form_id == 'user_login'||$form_id == 'user_login_block')
	{
		//If the user login form is being submitted, add our validation handler.
        if (isset($form_state['post']['name']))
		{
            // Find the local validation function's entry so we can replace it.
            $array_key = array_search('user_login_authenticate_validate',$form['#validate']);
        
            if ($array_key === FALSE)
			{
                // Could not find it. Some other module must have run form_alter().
                // We will simply add our validation just before the final                                  //validator.
                $final_validator = array_pop($form['#validate']);
                $form['#validate'][] = 'oj_user_login_validate';
                $form['#validate'][] = $final_validator;
            }
            else
			{
                // Found the local validation function. Replace with ours.
                $form['#validate'][$array_key] = 'oj_user_login_validate';
            }
        }
	}
	if($form_id == 'user_register')
	{
		variable_set('oj_user_register',TRUE);
	}
	if($form_id == 'user_profile_form')
	{
		$form['System']['profile_solved']['#attributes'] = array('readonly' => 'true');
		$form['System']['profile_submissions']['#attributes'] = array('readonly' => 'true');
		$form['System']['profile_volume']['#attributes'] = array('readonly' => 'true');
		$form['System']['profile_ip']['#attributes'] = array('readonly' => 'true');
		$form['account']['name']['#attributes'] = array('readonly' => 'true');
	}
}
/**
 * Form validation handler.
 */
function oj_user_login_validate($form, &$form_state)
 {
    global $user;
    if (!empty($user->uid))
	{
        // Another module has already handled authentication.
        return;
    }
    // Call our custom authentication function.
    if (!user_authenticate($form_state['values']))
	{
		$result = db_query("SELECT uid FROM {users} WHERE name='%s'",$form_state['values']['name']);
		if($item = db_fetch_object($result))//just for new user
			if($item)
			{
				form_set_error('name', t('Unrecognized username.'));
				return;
			}
		if(!oj_user_authenticate($form_state['values']))// Authentication failed;
			form_set_error('name', t('Unrecognized username.'));
    }
}
 
/**
 * Custom authentication function. This could be much more complicated,
 * checking an external database, LDAP, etc.
 */
function oj_user_authenticate($form_values)
 {
    global $oj_user_authenticated;
	$encode = "PWDforJO2005";
    $username = $form_values['name'];
	$password = $form_values['pass'];
	/*$query="SELECT * FROM {users} WHERE name='%s'";
	$result=db_query($query,$username);
	if ($user = db_fetch_object($result))
	{
		debug($user);
		return TRUE;
	}*/
	//mysql_connect('localhost','root','123456');
	//mysql_select_db('JudgeOnline');
	db_set_active('JudgeOnline');
	$query = "SELECT * FROM users WHERE user_id='%s' AND password=ENCODE('%s','%s') AND UPPER(defunct) = 'N'";
	$result = db_query($query,$username,$password,$encode);
	db_set_active('default');
	//debug($query);debug($result);
    if ($user = db_fetch_object($result))
	{
        // Log user in, or register new user if not already present.
        oj_user_external_login_register($username, $password, 'oj_user');
        
        // Write session, update timestamp, run user 'login' hook.
        user_authenticate_finalize($form_state['values']);
        // Use a global variable to save the fact that we did authentication.
        // (See use of this global in hook_user() implementation of next
        // code listing.)
        $oj_user_authenticated = TRUE;
        return TRUE;
    }
    else
	{
        return FALSE;
    }
}

function oj_user_external_login_register($name, $pass, $module) 
{
	global $user;

	$existing_user = user_load(array('name' => $name));
	if (isset($existing_user->uid)) 
	{
		$user = $existing_user;
	}
	else 
	{
		// Register this new user.
		$userinfo = array
		(
			'name' => $name, 
			'pass' => $pass, 
			'init' => $name, 
			'status' => 1, 
			"authname_$module" => $name, 
			'access' => time(),
		);
		$account = user_save('', $userinfo);
		// Terminate if an error occured during user_save().
		if (!$account) 
		{
			drupal_set_message(t("Error saving user account."), 'error');
			return;
		}
		$user = $account;
		watchdog('user', 'New external user: %name using module %module.', array('%name' => $name, '%module' => $module), WATCHDOG_NOTICE, l(t('edit'), 'user/' . $user->uid . '/edit'));
  }
}

/*
*	insert user to drupal.
*/
function oj_user_insert(&$edit, &$account, $category)
{
	if(variable_get('oj_user_register',FALSE))
		return;
	$username=$edit['name'];
	db_set_active('JudgeOnline');
	db_query("SET NAMES 'latin1'");
	$query="SELECT *,UNIX_TIMESTAMP(reg_time) AS reg_time,UNIX_TIMESTAMP(accesstime) AS accesstime FROM users WHERE user_id='$username'";
	$result=db_query($query);
	
    if (!($user = db_fetch_object($result)))//It is a user for drupal.
	{
		return;
	}
	$query = "SELECT rightstr FROM privilege WHERE user_id='%s' AND UPPER(defunct) = 'N'";
	$result = db_query($query,$username);
	db_set_active('default');
	while ($right = db_fetch_object($result))
	{
		switch($right->rightstr)
		{
			case 'source_browser':$edit['roles']['3'] = 3;
			break;
			case 'member':$edit['roles']['4'] = 4;
			break;
			case 'Administrator':
			case 'root':$edit['roles']['5'] = 5;
			break;
		}
	}
	//debug($user,'$user')
	$language=array('G++','GCC','JAVA','Pascal','Masm32');
	if($user->email == NULL)
		$user->email = $user->user_id;
	db_query("UPDATE {users} SET mail = '%s',created=%d,login=%d WHERE uid = %d", $user->email,$user->reg_time,$user->accesstime,$account->uid); 
	//db_query("UPDATE {profile_values} SET value='%s' WHERE fid=(SELECT fid FROM {profile_fields} WHERE name='profile_nick') AND uid=%d",$user->nick,$account->uid);
	//db_query("UPDATE {profile_values} SET value='%s' WHERE fid=(SELECT fid FROM {profile_fields} WHERE name='profile_school') AND uid=%d",$user->school,$account->uid);
	$edit['profile_nick'] = phpcharset($user->nick,'UTF-8');
	$edit['profile_school'] = phpcharset($user->school,'UTF-8');
	$edit['profile_qq'] = $user->qq;
	$edit['profile_language'] = $language[$user->language];
	$edit['profile_share'] = $user->share;
	$edit['profile_ip'] = $user->ip;
	$edit['profile_volume'] = $user->volume;
	$edit['profile_solved'] = $user->solved;
	$edit['profile_submissions'] = $user->submit;
	profile_save_profile($edit, $account, $category, TRUE);
	db_query("INSERT INTO {profile_values} (fid, uid, value) VALUES (%d, %d, '%s')", 4, $account->uid, $user->solved);
	db_query("INSERT INTO {profile_values} (fid, uid, value) VALUES (%d, %d, '%s')", 5, $account->uid, $user->submit);
}

function check_qq($qq)
{
	if(preg_match('/^[1-9][0-9]{4,9}$/',$qq))
		return TRUE;
	return FALSE;
}

/*
*	show user's problem informations
*/
function oj_user_info($account)
{
	global $user;
	//$data = unserialize($account->data);
	$login_time = oj_date($account->login);
	$status_url = url('status');
	$user_url = url('user');
	$search_user = url('search/user');
	$bg_url = drupal_get_path('module','oj').'/misc/images/bg.jpg';
	if($account->profile_qq != NULL)
	{
		$qq_url = "<a target='_blank' href='http://wpa.qq.com/msgrd?v=3&uin={$account->profile_qq}&site=qq&menu=yes'>
			<img border=0 src='http://wpa.qq.com/pa?p=2:{$account->profile_qq}:41 &r=0.5409521391365766' 
			alt='Contact me!' title='Contact me!'></a>";
	}
	$items = db_query("SELECT pid FROM {solution} WHERE uid=%d AND result=0 GROUP BY pid ORDER BY pid",$account->uid);
	while($item = db_fetch_object($items))
	{
		$problem_url .= "<a href=$status_url?pid={$item->pid}&uid={$account->uid}&result=0>{$item->pid}</a>\n";
	}
	$sql="
		SELECT
			*
		FROM
			(SELECT *,@rank:=@rank+1 AS rank FROM (SELECT * FROM user_rank)t,(SELECT @rank:=0) r)tt
		WHERE
			uid=%d";
	$item = db_fetch_object(db_query($sql,$account->uid));
	$rank = $item->rank;
	
	/*$Neighbours = <<<HTML
		<TABLE width=80% border=1 bordercolorlight=#E4E9EB bordercolordark=#FFFFFF style="border-collapse: collapse">
			<tr BGCOLOR=#6589D1 align=center style="color:#fff;">
				<td width=10%>Rank</td>
				<td width=40%>User</td>
				<td width=25%>Solved</td>
				<td width=25%>Submissions</td>
			</tr>
HTML;
	$sql="
		SELECT
			*
		FROM
			(SELECT *,@rank:=@rank+1 AS rank FROM (SELECT * FROM user_rank)t,(SELECT @rank:=0) r)tt LIMIT %d,7";
	$items = db_query($sql,($rank-4)<0?0:($rank-4));
	while($item = db_fetch_object($items))
	{
		if ($item->rank == $rank)
			$color = "#C0C0C0";
		else if ($item->rank % 2 == 1)
			$color = "#ffffff";
		else
			$color = "#E2E4FF";
		$Neighbours .= "<tr align=center bgcolor=$color><td width=10%>{$item->rank}</td>
		<td width=40%><a href=$user_url/{$item->uid}/status>{$item->name}</a></td>
		<td width=25%>{$item->solved}</td>
		<td width=25%>{$item->submissions}</td>
		</tr>";
	}
	$Neighbours .= "</table>";*/
	$Neighbours = oj_user_neighbours($rank);
	if(is_admin_login())
		$login_ip = "\n<BR>".$account->profile_ip;
	$output =<<<SCR
	<center>
		<a href=#>{$account->name}--{$account->profile_nick}</a><br/>
		Last Loginned Time:$login_time
		$login_ip
		<TABLE width=80% border=1 class=user_info id=user_{$account->uid}_info style="background-image:$bg_url">
		<tr>
			<td align="center" valign="middle" colspan=2></td>
			<td align="center" valign="middle" colspan=2><br>
				<form action=../cmp method=get>Compare 
					<input type=text size=15 name=uid1 value={$account->name}>and 
					<input type=text size=15 name=uid2 value={$user->name}>
					<input type=submit value=GO>
				</form>
			</td>
		</tr>
		<tr>
			<td width=15% align=left>Rank:</td>
			<td align=center width=25%>$rank</td>
			<td width=60% align=center>Solved Problems List</td>
		</tr>
		<tr>
			<td width=15% align=left>Solved:</td>
			<td align=center width=25%><a href=$status_url?result=0&uid={$account->uid}>{$account->profile_solved}</a></td>
			<td width=60% align=center rowspan=5>$problem_url</td>
		</tr>
		<tr>
			<td width=15% align=left>Submissions:</td>
			<td align=center width=25%><a href=$status_url?uid={$account->uid}>{$account->profile_submissions}</a></td>
		</tr>
		<tr>
			<td width=15% align=left>School:</td>
			<td align=center width=25%><a href=$search_user/{$account->profile_school}>{$account->profile_school}</a></td>
		</tr>
		<tr>
			<td width=15% align=left>Email:</td>
			<td align=center width=25%><a href=mailto:{$account->mail}>{$account->mail}</a></td>
		</tr>
		<tr>
			<td width=15% align=left>QQ:</td>
			<td align=center width=25%>$qq_url</td>
		</tr>
		</table>
		<font size=5>Neighbours:</font><br>
			$Neighbours
	</center>
SCR;
	return $output;
}


function oj_user_neighbours($rank)
{
	drupal_add_css(drupal_get_path('module', 'datatables') . 'dataTables/media/css/demo_table_jui.css');
	drupal_add_css(drupal_get_path('module', 'datatables') . '/theme/css/redmond/jquery-ui-1.8.17.custom.css');
	$head = array
	(
        array('data' => 'Rank'),
        array('data' => 'User ID'),
        array('data' => 'Nick Name'),
        array('data' => 'Solved'),
        array('data' => 'Submit'),
        array('data' => 'Ratio'),
    );
	
	$sql="
		SELECT
			*
		FROM
			(SELECT *,@rank:=@rank+1 AS rank FROM (SELECT * FROM user_rank)t,(SELECT @rank:=0) r)tt LIMIT %d,7";
	$items = db_query($sql,($rank-4)<0?0:($rank-4));
	while($item = db_fetch_object($items))
	{
		$dummy_row[] = array
		(
			array('data' => $item->rank),
			array('data' => "<a href=".url("user/".$item->uid."/status").">{$item->name}</a>"),
			array('data' => $item->nick),
			array('data' => $item->solved),
			array('data' => $item->submissions),
			array('data' => sprintf("%.0f",$item->solved/$item->submissions*100).'%'),
		);
	}
	
	$colwidths = array
	(
        array('bSortable'=>false,'sWidth'=>'6%'),
        array('bSortable'=>false,'sWidth'=>'24%'),
        array('bSortable'=>false,'sWidth'=>'40%'),
        array('bSortable'=>false,'sWidth'=>'10%'),
        array('bSortable'=>false,'sWidth'=>'10%'),
        array('bSortable'=>false,'sWidth'=>'10%'),
    );
	
	$params = array
	(
		'datatable_options' => array
		(
            'sDom' => '<"H"<"clear">>rt<"F"<"clear">><"clear">',
            //'sCookiePrefix' => 'ul_',
            //'bProcessing' => false,
            //'bServerSide' => true,
            'aoColumns' => $colwidths,
            'bJQueryUI' => true,
			'bAutoWidth' => false,
        )
    );
	
	return theme_datatable($head,$dummy_row,$params);
}

function rebuild_problem_info()
{
	$items = db_query("SELECT uid FROM {users} WHERE uid>0");
	while($uid = db_fetch_object($items)->uid)
	{
		$account = user_load($uid);
		$info = array
		(
			'profile_submissions' => db_result(db_query("SELECT COUNT(*) FROM {solution} WHERE uid=%d",$uid)),
			'profile_solved' => db_result(db_query("SELECT COUNT(DISTINCT pid) FROM {solution} WHERE result=0 AND uid=%d",$uid)),
		);
		user_save($account,$info,'System');
	}
	drupal_set_message('Rebuild problem information done.');
	drupal_goto('user/list');
}

function oj_user_nick($uid)
{
	$account = user_load($uid);
	return $account->profile_nick;
}

function reset_user_access()
{
	global $user;
	if($user->uid==1)
		return true;
	return false;
}
